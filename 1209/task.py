import numpy as np

'''
1.
Поэлементное сложение двух одномерных массивов, a1 и a2, заданного размера N. 
Элементы массива a1: числа, равнораспределённые в диапазоне от 0 до 100. 
Элементы массива a2: числа, равнораспределённые в интервале от 0 до 1.
'''
def task1():
    n = int(input())
    # равномерное распределение от 0 до 1
    a2 = np.random.sample(n)
    # равномерное распределение от 0 до 100
    a1 = 100 * np.random.sample(n)
    print(a1)
    print(a2)
    print(a1+a2)

'''
2. Перемножение матриц, m1 и m2, с заданным числом строк и  столбцов. Элементы в каждом столбце матрицы m1: 
элементы из массива a1. Элементы в каждой строке матрицы m2: элементы из массива a2.
Все массивы должны иметь тип ndarray. Размеры массивов и  матриц произвольны и задаются как параметры. 
Заполнение матриц m1 и m2 значениями следует сделать с использованием операции срезов массивов.
Операции 1 и 2 необходимо реализовать двумя способами: непосредственно с помощью циклов for
и используя возможности библиотеки NumPy, позволяющие 
выполнять операции над массивами целиком. Сравните время выполнения операций 1 и 2, выполненных обоими способами. 
Время выполнения некоторого участка кода можно вычислить, при-меняя функцию default_timer() из модуля timeit. 
Данная функция возвращает время в секундах, прошедшее с момента запуска интерпретатора. 
Ниже для примера приведён код для выполнения и анализа времени выполнения операции сложения массива a1, 
заполненного нулями, с массивом a2, заполненным единицами.
'''

def task2():
    # загрузка функции-таймера
    from timeit import default_timer as timer
    # подключение библиотеки numpy
    import numpy as np
    N=1000
    # размер одномерных массивов# создание массива, заполненного нулями
    a1 = np.zeros((N))
    # создание массива, заполненного единицами
    a2 = np.ones((N))
    # массив для сохранения результата сложения
    result = np.zeros((N))
    # сложение созданных массивов напрямую в цикле
    print('a) сложение массивов напрямую в цикле:')
    start = timer() # запуск таймера
    for i in range(N):
        result[i] = a1[i] + a2[i]

    end = timer()
    # остановка таймера
    print(u'  время выполнения: %.3e с' % (end - start))
    # быстрое сложение
    print('б) сложение с помощью numpy:')
    start = timer()
    # запуск таймера
    result = a1 + a2
    end = timer()
    # остановка таймера
    print('  время выполнения: %.3e с' % (end - start))
    # намного меньше времени занимает на порядок

if __name__ == '__main__':
    task2()